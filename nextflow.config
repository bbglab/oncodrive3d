/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    bbg/clustering_3d Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')

// Global default params, used in configs
params {

    outdir             = "./" 
    outsubdir          = "run_${trace_timestamp}"
    cohort_pattern     = "*"    
    data_dir           = "/workspace/nobackup/scratch/oncodrive3d/datasets"
    annotations_dir    = "/workspace/nobackup/scratch/oncodrive3d/annotations"
    container          = "${baseDir}/build/containers/oncodrive3d_231205.sif"
    cores              = 10
    memory             = "50G"
    max_running        = 5
    vep_input          = false
    mane               = false
    plot               = false
    seed               = 128

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '256.GB'
    max_cpus                   = 56
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes,igenomes_base'
    validationShowHiddenParams       = false
    validate_params                  = true

}


// Load base.config by default for all pipelines
// includeConfig 'nf_conf/base.config'


// Profiles

profiles {

    container {
        process.executor = 'slurm'
        singularity.enabled = true
    }

    conda {
        process.executor = 'slurm'
        singularity.enabled = false
        conda.enabled = true
        process.conda = '/home/spellegrini/miniconda3/envs/o3d'
    }

    test { 
        process.executor = 'slurm'
        singularity.enabled = true
        includeConfig 'nf_conf/test.config' 
    }
}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']


// Monitoring 
timeline {
    enabled = true
    file    = "${params.outdir}/run_${trace_timestamp}/pipeline_info/timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/run_${trace_timestamp}/pipeline_info/report_${trace_timestamp}.html"
}
trace {
    enabled = true
    fields = 'process,task_id,hash,name,attempt,status,exit,realtime,%cpu,vmem,rss,submit,start,complete,duration,realtime,rchar,wchar'
    file    = "${params.outdir}/run_${trace_timestamp}/pipeline_info/trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/run_${trace_timestamp}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}


// Manifest
manifest {
    name            = 'bbg/clustering_3D'
    author          = """Stefano Pellegrini"""
    homePage        = 'https://github.com/bbg/clustering_3d'
    description     = """Oncodrive3D : Oncodrive3D is a method designed to analyse patterns of somatic mutations across tumors and normal tissues to identify three-dimensional clusters of missense mutations and detect genes that are under positive selection."""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}