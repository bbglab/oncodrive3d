"""
Add DNA sequences to the AF sequences dataframe, include an eval metric.

It takes as input the sequence dataframe genereted in the previous step 
by protein_seq_for_mut_prob.py and a directory including DNA sequences.
It simply annotated the sequence dataframe with the DNA sequences.
The DNA sequences must be obtained submitting jobs to 
https://www.ebi.ac.uk/Tools/st/emboss_backtranseq/ 
using as input the fasta files generated in the previous step.


###################################### EXAMPLE USAGE ####################################

python3 dna_seq_for_mut_prob.py -i ../../datasets/seq_for_mut_prob.csv \
-I ../../datasets/temp/fasta_seq/dna/
      
#########################################################################################
"""

import pandas as pd
import numpy as np
import argparse
from Bio.Seq import Seq
from Bio import SeqIO
from progressbar import progressbar
from utils import translate_dna, get_seq_similarity


pd.options.mode.chained_assignment = None


def add_dna_seq_to_protein_df(seq_df, path_to_fasta, v=False):
    """
    Load the DNA sequences back translated from amino acid sequences 
    using EMBL: https://www.ebi.ac.uk/Tools/st/emboss_backtranseq/
    Add them to the dataframe of sequences used to generate the fasta 
    file used as input for EMBL.
    """

    seq_df = seq_df.copy()
    seq_df = seq_df.assign(Seq_dna = np.nan)
    seq_df = seq_df.assign(Sim_ratio = np.nan)
    
    # Iterate through the fasta files (batches)
    for batch in progressbar([int(b) for b in seq_df["Batch"].unique() if not pd.isnull(b)]):
        if v: print("Processing batch", batch)
        path = f"{path_to_fasta}/dna{batch}.fasta"
        if v:  print(path, "\n")
        
        # Iterate through the sequences in the fasta file
        for fasta in SeqIO.parse(path,'fasta'):
    
            # Get header and seq
            prot_n, dna_seq = int(fasta.id), str(fasta.seq)

            # Save DNA seq to df
            seq_df.Seq_dna.loc[(seq_df["Batch"] == batch) & (seq_df["N_prot"] == prot_n)] = dna_seq

            # Translate to protein and compare similarity
            prot_seq = seq_df.Seq[(seq_df["Batch"] == batch) & (seq_df["N_prot"] == prot_n)].values[0]
            translated = translate_dna(dna_seq)
            sim_ratio = get_seq_similarity(a=prot_seq, b=translated, decimals=3)
            seq_df.Sim_ratio.loc[(seq_df["Batch"] == batch) & (seq_df["N_prot"] == prot_n)] = sim_ratio
            
    return seq_df


def main():
    
    ## Parser
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input_seq_df", 
                        help="Path to the sequence df generated by protein_seq_for_mut_prob.py", 
                        type=str, 
                        default="../../datasets/seq_for_mut_prob.csv")            
    parser.add_argument("-I", "--input_fasta_seq_dna", 
                        help="Path to the directory including fasta files of DNA seq obtained by backtranslation", 
                        type=str, 
                        default="../../datasets/temp/fasta_seq/dna/")                                         
    parser.add_argument("-v", "--verbose", help="Verbose", type=int, default=0)          

    args = parser.parse_args()
    input_seq_df = args.input_seq_df
    input_fasta_seq_dna = args.input_fasta_seq_dna
    verbose = args.verbose

    # Load the df including protein sequences and add DNA seq obtained from backtranslation
    seq_df = pd.read_csv(input_seq_df)
    print(f"Adding DNA sequence to: {input_seq_df}")
    seq_df = add_dna_seq_to_protein_df(seq_df, path_to_fasta=input_fasta_seq_dna, v=verbose)
    if sum(seq_df["Sim_ratio"]) != len(seq_df["Sim_ratio"]): 
        print("WARNING: some backtranslated DNA sequence do not match with protein ones")                                 ###### RAISE PROPER WARNINGS                          
    else:
        seq_df = seq_df.drop(columns=["Seq", "Batch", "N_prot", "Sim_ratio"])
    seq_df.to_csv(input_seq_df, index=False)
    print(f"Dataframe including proteins seq is annotated with DNA seq")


if __name__ == "__main__":
    main()